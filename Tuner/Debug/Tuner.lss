
Tuner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000242  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f4  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d0  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033c  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001314  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000338  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000221  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000019ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	a0 c0       	rjmp	.+320    	; 0x15e <__vector_14>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	42 c0       	rjmp	.+132    	; 0xac <__vector_19>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	20 e0       	ldi	r18, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a4 36       	cpi	r26, 0x64	; 100
  42:	b2 07       	cpc	r27, r18
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	29 d0       	rcall	.+82     	; 0x9a <main>
  48:	c0 c0       	rjmp	.+384    	; 0x1ca <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <init_timer0>:
	{
		wait_Serial();
		UDR = str[i];
	}
	return 0;
}
  4c:	f8 94       	cli
  4e:	83 b7       	in	r24, 0x33	; 51
  50:	8b 60       	ori	r24, 0x0B	; 11
  52:	83 bf       	out	0x33, r24	; 51
  54:	80 e8       	ldi	r24, 0x80	; 128
  56:	8c bf       	out	0x3c, r24	; 60
  58:	89 b7       	in	r24, 0x39	; 57
  5a:	82 60       	ori	r24, 0x02	; 2
  5c:	89 bf       	out	0x39, r24	; 57
  5e:	78 94       	sei
  60:	08 95       	ret

00000062 <init_ADC>:
  62:	1a ba       	out	0x1a, r1	; 26
  64:	86 b1       	in	r24, 0x06	; 6
  66:	80 68       	ori	r24, 0x80	; 128
  68:	86 b9       	out	0x06, r24	; 6
  6a:	86 b1       	in	r24, 0x06	; 6
  6c:	88 60       	ori	r24, 0x08	; 8
  6e:	86 b9       	out	0x06, r24	; 6
  70:	17 b8       	out	0x07, r1	; 7
  72:	86 b1       	in	r24, 0x06	; 6
  74:	86 60       	ori	r24, 0x06	; 6
  76:	86 b9       	out	0x06, r24	; 6
  78:	08 95       	ret

0000007a <start_ADC>:
  7a:	86 b1       	in	r24, 0x06	; 6
  7c:	80 64       	ori	r24, 0x40	; 64
  7e:	86 b9       	out	0x06, r24	; 6
  80:	08 95       	ret

00000082 <init_UART>:
  82:	83 e3       	ldi	r24, 0x33	; 51
  84:	89 b9       	out	0x09, r24	; 9
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	88 61       	ori	r24, 0x18	; 24
  8a:	8a b9       	out	0x0a, r24	; 10
  8c:	80 b5       	in	r24, 0x20	; 32
  8e:	86 68       	ori	r24, 0x86	; 134
  90:	80 bd       	out	0x20, r24	; 32
  92:	08 95       	ret

00000094 <wait_Serial>:
  94:	5d 9b       	sbis	0x0b, 5	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <wait_Serial>
  98:	08 95       	ret

0000009a <main>:


int main(void)
{
	init_timer0(1024);
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	94 e0       	ldi	r25, 0x04	; 4
  9e:	d6 df       	rcall	.-84     	; 0x4c <init_timer0>
	init_UART();
  a0:	f0 df       	rcall	.-32     	; 0x82 <init_UART>
	init_ADC();
  a2:	df df       	rcall	.-66     	; 0x62 <init_ADC>
	
	
	//TCCR0 |= 1 << WGM01;
	
	DDRC |= 1 << 2;
  a4:	84 b3       	in	r24, 0x14	; 20
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	84 bb       	out	0x14, r24	; 20
  aa:	ff cf       	rjmp	.-2      	; 0xaa <main+0x10>

000000ac <__vector_19>:
}



ISR(TIMER0_COMP_vect)
{
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	2f 93       	push	r18
  b8:	3f 93       	push	r19
  ba:	4f 93       	push	r20
  bc:	5f 93       	push	r21
  be:	6f 93       	push	r22
  c0:	7f 93       	push	r23
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	af 93       	push	r26
  c8:	bf 93       	push	r27
  ca:	ef 93       	push	r30
  cc:	ff 93       	push	r31
	//write_Serial("Any plus Vladik = love\n");
	start_ADC();
  ce:	d5 df       	rcall	.-86     	; 0x7a <start_ADC>
	cnt2 = (cnt2 + 1) % 10;
  d0:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <_edata>
  d4:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <_edata+0x1>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	9a 01       	movw	r18, r20
  de:	ad ec       	ldi	r26, 0xCD	; 205
  e0:	bc ec       	ldi	r27, 0xCC	; 204
  e2:	67 d0       	rcall	.+206    	; 0x1b2 <__umulhisi3>
  e4:	96 95       	lsr	r25
  e6:	87 95       	ror	r24
  e8:	96 95       	lsr	r25
  ea:	87 95       	ror	r24
  ec:	96 95       	lsr	r25
  ee:	87 95       	ror	r24
  f0:	9c 01       	movw	r18, r24
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	82 0f       	add	r24, r18
 104:	93 1f       	adc	r25, r19
 106:	9a 01       	movw	r18, r20
 108:	28 1b       	sub	r18, r24
 10a:	39 0b       	sbc	r19, r25
 10c:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <_edata+0x1>
 110:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <_edata>
	cnt++;
 114:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <cnt>
 118:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <cnt+0x1>
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <cnt+0x1>
 122:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <cnt>
	if (cnt == 1000)
 126:	88 3e       	cpi	r24, 0xE8	; 232
 128:	93 40       	sbci	r25, 0x03	; 3
 12a:	41 f4       	brne	.+16     	; 0x13c <__vector_19+0x90>
	{
		PORTC ^= 1 << 2;
 12c:	95 b3       	in	r25, 0x15	; 21
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	89 27       	eor	r24, r25
 132:	85 bb       	out	0x15, r24	; 21
		cnt = 0;
 134:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <cnt+0x1>
 138:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <cnt>
		PORTC ^= (1 << 2);
	*/			
			

	//ADC Processing
}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	7f 91       	pop	r23
 14a:	6f 91       	pop	r22
 14c:	5f 91       	pop	r21
 14e:	4f 91       	pop	r20
 150:	3f 91       	pop	r19
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <__vector_14>:


ISR(ADC_vect)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
	cli();
 180:	f8 94       	cli
	wait_Serial();
 182:	88 df       	rcall	.-240    	; 0x94 <wait_Serial>
	UDR = ADCL;
 184:	84 b1       	in	r24, 0x04	; 4
 186:	8c b9       	out	0x0c, r24	; 12
	wait_Serial();
 188:	85 df       	rcall	.-246    	; 0x94 <wait_Serial>
	UDR = ADCH;
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	8c b9       	out	0x0c, r24	; 12
	sei();
 18e:	78 94       	sei
}
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <__umulhisi3>:
 1b2:	a2 9f       	mul	r26, r18
 1b4:	b0 01       	movw	r22, r0
 1b6:	b3 9f       	mul	r27, r19
 1b8:	c0 01       	movw	r24, r0
 1ba:	a3 9f       	mul	r26, r19
 1bc:	01 d0       	rcall	.+2      	; 0x1c0 <__umulhisi3+0xe>
 1be:	b2 9f       	mul	r27, r18
 1c0:	70 0d       	add	r23, r0
 1c2:	81 1d       	adc	r24, r1
 1c4:	11 24       	eor	r1, r1
 1c6:	91 1d       	adc	r25, r1
 1c8:	08 95       	ret

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
